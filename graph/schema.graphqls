scalar Long

type TopPair {
  id: ID!
  token0: String!
  token1: String!
  icon0: String!
  icon1: String!
  totalVolumeRecorded: Float!
  marketCap: Float!
}

type Token {
  id: ID!
  name: String!
  totalSupply: Float!
  iconURL: String!
  price: Float!
}

type User {
  id: ID!
  username: String!
  hashedPassword: String!
}

type UserBalance {
  user: User!
  token: Token!
  balance: Float!
}

type Pair {
  id: ID!
  token0: Token!
  token1: Token!
  balance0: Float!
  balance1: Float!
  marketCap: Float!
  totalVolumeRecorded: Float!
}

type SwapTransaction {
  id: ID!
  user: User!
  inToken: Token!
  outToken: Token!
  inAmount: Float!
  outAmount: Float!
  volumeContributed: Float!
}

type TokenHourData {
  token: Token!
  hourId: Int!
  tokenPrice: Float!
}

type Link {
  id: ID!
  title: String!
  address: String!
  user: User!
}

type Query {
  links: [Link!]!
  token(id: String!): Token!
  tokens: [Token!]!
  tokenSearch(prefix: String!): [Token!]!
  getBestExchangeRate(inToken: String!, outToken: String!, inAmount: Float!): Float!
  getUserBalance(token: String!): Float!
  getTopTradedPair(pageId: Int!): [TopPair!]!
  getTopMarketCapTokens(pageId: Int!): [Token!]!
}

input NewLink {
  title: String!
  address: String!
}

input RefreshTokenInput{
  token: String!
}

input NewUser {
  username: String!
  password: String!
}

input Login {
  username: String!
  password: String!
}

type Mutation {
  createLink(input: NewLink!): Link!
  createUser(input: NewUser!): String!
  login(input: Login!): String!
  # we'll talk about this in authentication section
  refreshToken(input: RefreshTokenInput!): String!
  swap(inToken: String!, outToken: String!, inAmount: Float!): Boolean!
}